# Generated by Django 4.2 on 2024-09-20 18:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

def populate_dashboard_links(apps, schema_editor):
    DashboardLink = apps.get_model('mab', "DashboardLink")

    initial_data = [
        {
            'name': 'BigBank add DRL to Letter Filenames',
            'description': 'Switch CSN numbers with DRLs in letter filenames.',
            'link': '/clientrelations/bigbank_add_drl_letter_filenames',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'BigBank Directs Merger',
            'description': 'Merge the BigBank seconds directs into a single file.',
            'link': '/clientrelations/bigbank_directs_merger',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'BigBank Email Violation Check',
            'description': 'check the BigBank email data files for violations.',
            'link': '/clientrelations/bigbank_email_violation_check',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'BigBank Monthly Dialer File Check',
            'description': 'Fix errors in BigBank monthly dialer file check.',
            'link': '/clientrelations/bigbank_monthly_dialer_file_check',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'Bank DEC and BKP Reports',
            'description': 'Converts DEC and BKP data into Excel files',
            'link': '/clientrelations/bank_dec_and_bkp_reports',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'Bank Recall Merger',
            'description': 'Display the recalled accounts in the agency2echo files.',
            'link': '/clientrelations/bank_recall_merger',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'Bank Weekly SIF Report',
            'description': 'Generate the Bank weekly SIF repot.',
            'link': '/clientrelations/bank_weekly_sif_report',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'AStore Directs Merger',
            'description': 'Merge the AStore directs into a single file.',
            'link': '/clientrelations/astore_directs_merger',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'AClient Call Log',
            'description': 'Create Monthly and Quarterly AClient call logs.',
            'link': '/clientrelations/aclient_call_log',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'AClient File Merger',
            'description': 'Merge aclient01 and aclient02 files into one excel file.',
            'link': '/clientrelations/aclient_file_merger',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'Sectional Call Log',
            'description': 'Create a call log for Sectional.',
            'link': '/clientrelations/sectional_call_logs',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'Revo Weekly Invoice',
            'description': 'Create weekly invoices for Revo.',
            'link': '/clientrelations/revo_weekly_invoice',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'Email Search',
            'description': "Tool for retrieving sent emails.",
            'link': '/clientrelations/email_retrieval',
            'department': 1,
            'type': 1,
        },
        {
            'name': 'Pay for Performance',
            'description': "Report for analyzing collector performance over previous 6 months.",
            'link': '/operations/reports/pay_for_performance',
            'department': 6,
            'type': 2,
        },
        {
            'name': 'Agent Productivity Report',
            'description': "Report that combines DialConnect's Agent Productivy and Call Log together.",
            'link': '/operations/reports/agent_productivity',
            'department': 6,
            'type': 2,
        },
        {
            'name': 'Collector Goal Summary',
            'description': "Report that calculates collector's progress toward monthly goals.",
            'link': '/operations/reports/collector_goal_summary',
            'department': 6,
            'type': 2,
        },
    ]

    for data in initial_data:
        DashboardLink.objects.create(**data)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('link', models.CharField(max_length=255)),
                ('department', models.IntegerField(choices=[(1, 'Client Relations'), (2, 'Collections'), (3, 'Customer Service'), (4, 'Human Resources'), (5, 'Information Technology'), (6, 'Operations'), (7, 'Postng'), (8, 'Quality Assurance'), (9, 'Training'), (10, 'Risk Management')])),
                ('type', models.IntegerField(choices=[(1, 'Tool'), (2, 'Report')])),
            ],
        ),
        migrations.CreateModel(
            name='UserDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mab.dashboardlink')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.IntegerField(choices=[(1, 'View'), (2, 'Reply'), (3, 'Notify'), (4, 'Review')])),
                ('priority', models.IntegerField(choices=[(1, 'High'), (2, 'Medium'), (3, 'Low')])),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_seen', models.BooleanField(default=False)),
                ('is_read', models.BooleanField(default=False)),
                ('link', models.CharField(max_length=255)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(populate_dashboard_links),
    ]
